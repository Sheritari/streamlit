import streamlit as st
import pandas as pd
import numpy as np
from streamlit import cache_data

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–æ–∫–∏–π —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Airbnb Analytics Dashboard", layout="wide")
st.title("üéØ Airbnb Analytics Dashboard")
st.markdown("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞—Ä–µ–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º - —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞—Ç–∞—Å–µ—Ç
@cache_data
def load_data():
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    np.random.seed(42)
    
    data = {
        'neighbourhood_group': np.random.choice(['Manhattan', 'Brooklyn', 'Queens', 'Bronx', 'Staten Island'], 1000),
        'room_type': np.random.choice(['Entire home/apt', 'Private room', 'Shared room'], 1000),
        'price': np.random.randint(50, 500, 1000),
        'number_of_reviews': np.random.randint(0, 200, 1000),
        'minimum_nights': np.random.randint(1, 30, 1000),
        'availability_365': np.random.randint(0, 365, 1000),
        'latitude': np.random.uniform(40.50, 40.90, 1000),
        'longitude': np.random.uniform(-74.25, -73.70, 1000)
    }
    return pd.DataFrame(data)

df = load_data()

# –°–æ–∑–¥–∞–µ–º —Å–∞–π–¥–±–∞—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")

# –§–∏–ª—å—Ç—Ä 1: –°–ª–∞–π–¥–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω
price_range = st.sidebar.slider(
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:",
    min_value=int(df['price'].min()),
    max_value=int(df['price'].max()),
    value=(50, 300)
)

# –§–∏–ª—å—Ç—Ä 2: –ú—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–æ–≤
available_neighbourhoods = df['neighbourhood_group'].unique()
neighbourhood_groups = st.sidebar.multiselect(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",
    options=available_neighbourhoods,
    default=available_neighbourhoods
)

# –§–∏–ª—å—Ç—Ä 3: –°–µ–ª–µ–∫—Ç–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–º–Ω–∞—Ç—ã
room_type = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–º–Ω–∞—Ç—ã:",
    options=df['room_type'].unique()
)

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ –¥–∞–Ω–Ω—ã–º
filtered_data = df[
    (df['price'].between(price_range[0], price_range[1])) &
    (df['neighbourhood_group'].isin(neighbourhood_groups)) &
    (df['room_type'] == room_type)
]

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
st.subheader("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
col1, col2, col3 = st.columns(3)
col1.metric("–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π", len(filtered_data))
col2.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"${filtered_data['price'].mean():.2f}")
col3.metric("–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞", f"${filtered_data['price'].median():.2f}")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
st.subheader("üìã –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 20 –∑–∞–ø–∏—Å–µ–π)")
st.dataframe(filtered_data.head(20))

# –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")

# –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω (–≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞)
st.write("#### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω")
hist_values = np.histogram(filtered_data['price'], bins=30, range=(0, 500))[0]
st.bar_chart(hist_values)

# –ì—Ä–∞—Ñ–∏–∫ 2: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ä–∞–π–æ–Ω–∞–º
st.write("#### –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ä–∞–π–æ–Ω–∞–º")
neighbourhood_counts = filtered_data['neighbourhood_group'].value_counts()
st.bar_chart(neighbourhood_counts)

# –ì—Ä–∞—Ñ–∏–∫ 3: Scatter plot (–¶–µ–Ω–∞ vs. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤)
st.write("#### –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤")
scatter_data = filtered_data[['price', 'number_of_reviews']].copy()
scatter_data = scatter_data[scatter_data['number_of_reviews'] < 200]  # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—ã–±—Ä–æ—Å—ã
st.scatter_chart(scatter_data, x='price', y='number_of_reviews')

# –ö–∞—Ä—Ç–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
st.write("#### –ö–∞—Ä—Ç–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
map_data = filtered_data[['latitude', 'longitude', 'price', 'neighbourhood_group']].copy()
map_data = map_data.dropna()
st.map(map_data, zoom=10)

# –¢–∞–±–ª–∏—Ü–∞ —Å —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
st.write("#### –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–º")
pivot_table = filtered_data.groupby('neighbourhood_group').agg({
    'price': ['mean', 'median', 'count'],
    'number_of_reviews': 'mean'
}).round(2)
st.dataframe(pivot_table)

# –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
st.sidebar.markdown("---")
st.sidebar.info("""
**–û –¥–∞–Ω–Ω—ã—Ö:**
- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
- 1000 –∑–∞–ø–∏—Å–µ–π –æ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö –∞—Ä–µ–Ω–¥—ã
- –í–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ, —Ä–∞–π–æ–Ω–µ –∏ —Ç–∏–ø–µ –∂–∏–ª—å—è
""")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
st.markdown("---")
st.success("üöÄ –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ Streamlit Community Cloud!")
